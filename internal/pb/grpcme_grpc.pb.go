// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: grpcme.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcMeClient is the client API for GrpcMe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcMeClient interface {
	Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error)
}

type grpcMeClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcMeClient(cc grpc.ClientConnInterface) GrpcMeClient {
	return &grpcMeClient{cc}
}

func (c *grpcMeClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error) {
	out := new(ExecResponse)
	err := c.cc.Invoke(ctx, "/grpcme.GrpcMe/Exec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcMeServer is the server API for GrpcMe service.
// All implementations must embed UnimplementedGrpcMeServer
// for forward compatibility
type GrpcMeServer interface {
	Exec(context.Context, *ExecRequest) (*ExecResponse, error)
	mustEmbedUnimplementedGrpcMeServer()
}

// UnimplementedGrpcMeServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcMeServer struct {
}

func (UnimplementedGrpcMeServer) Exec(context.Context, *ExecRequest) (*ExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedGrpcMeServer) mustEmbedUnimplementedGrpcMeServer() {}

// UnsafeGrpcMeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcMeServer will
// result in compilation errors.
type UnsafeGrpcMeServer interface {
	mustEmbedUnimplementedGrpcMeServer()
}

func RegisterGrpcMeServer(s grpc.ServiceRegistrar, srv GrpcMeServer) {
	s.RegisterService(&GrpcMe_ServiceDesc, srv)
}

func _GrpcMe_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcMeServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcme.GrpcMe/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcMeServer).Exec(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcMe_ServiceDesc is the grpc.ServiceDesc for GrpcMe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcMe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcme.GrpcMe",
	HandlerType: (*GrpcMeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _GrpcMe_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcme.proto",
}
